= {hb} Specification
:author: Jeremy Bruestle, Frank Laub
:oslash: pass:[&#216;]
:hb: H{oslash}tb{oslash}x

:toc:


== Overall System Design
[red]#TODO:# Make an intro, put more content in this section

.H0tb0x System Architecture
image::H0tb0x_System_Architecture.png[H0tb0x System Architecture]

=== Definitions
Node::
	A node is a physical machine running a copy of the {hb} protocol stack.
Profile::
	A profile represents the logical user concept. Generally, a profile is
	controlled by a single individual. A given individual may have more than one
	profile for privacy reasons, however in many cases a profile will be
	one-to-one with the concept of a user. In addition, the profile is also unit
	for authorization, i.e. login to the {hb} device is per profile.
Friendship::
	A friendship is a mutual relation between two profiles. A given profile may
	'friend' another profile.
Collection::
	A group of objects, with a well defined creator and owner, which maps a set
	of keys (short binary strings) to values (large binary objects).
Invitation::
	An offer from a friend to give access to a collection.

== Application API
The application API of the {hb} system is RESTful HTTP API. The API is used to
perform management functions regarding profiles, friends, collections, and
invitations, as well as to store and retrieve bulk data. The URLs for the
various operations are all suffixes of a base URL which is not specified by this
documents. Instead, all URLs are specified as relative paths from this root. 


=== Data Model
[red]#TODO:# Put ERD here


=== Authorization and Profile Management
While {hb} provides for multiple profiles per node for the purposes of privacy
management or sharing of devices among a family, etc, there is a priveldeged
profile (the administrator) which has the ability to delete other profile [and
in V2 manage quotas]. The first profile created will automatically be a admin
profile.

All operations in {hb} take place relative to a profile. The first step in using
a node is thus to create a profile. The entire set of URLs used to manage
profiles is listed in table <<tbl_profile_api,Profile Management API>>.

[[tbl_profile_api]]
.Profile API
[options="header", width="80%", cols="2m,^m,3"]
|======================
| URL             | Method | Description
| /profiles/login | POST   | Authenticates to a profile
| /profiles       | GET    | List profiles
| /profiles       | POST   | Create a new profile
| /profiles/<pid> | GET    | Lists a single profile
| /profiles/<pid> | DELETE | Delete a profile
|======================

[[tbl_profile_obj]]
.Profile Object
[options="header", width="80%", cols="m,^m,3"]
|======================
| Field      | Type     | Description
| id         | string   | Hex ID of this profile (public)
| pub_key    | string   | Public key of profile (public)
| priv_key   | string   | Private key of profile (private)
| collection | string   | Hex ID of profile collection (public)
| contacts   | string[] | List of rendezvous protocol addresses (friend-visible)
|======================

In addition, most operations presume that a user is authenticated to a given
profile. Only +POST+ to +/profiles/login+, and +GET+ and +POST+ on +/profiles+
can be done without an authenticated session.

[red]#TODO:# Think about how to backup profile data/transfer to a new {hb} node

==== Logging in to a profile
To login as an existing profile, a +POST+ is made to +/profiles/<pid>+ with a
JSON object as described in table <<tbl_profile_login, Profile Login Object>>.
On succesful login, the profile object which was logged into is returned, along
with an appopriate cookie. On failure, and appropriate HTTP error code is
returned.

[[tbl_login_obj]]
.Profile Login Object
[options="header", width="80%", cols="m,^m,3"]
|======================
| Field      | Type     | Description
| name       | string   | The name to create/login as
| password   | string   | The password
|======================

==== Getting profiles
Performing a +GET+ on +/profiles+ returns a JSON list of all the profile
objects available. Each element is a JSON object, the data structure of which
show in table <<tbl_profile_obj>>. In addition, performing a +GET+ on a single
profile id +/profiles/<pid>+ returns a single JSON object of the profile, or
404 is no such profile exists. By default, only the public fields are returned.
Adding the URL parameter +?mode=friend+ or +?mode=private+ returns
respectively friend fields, and all fields. The use of +?mode=private+ is
intended only to export a profile for transfer to another device. In addition,
access to the non-default modes are only available to the corresponding profile
in an authenticated session.

==== Creating a new profile
To create a new profile, a +POST+ is made to +/profiles+. This post, must
consist of a JSON object as described in table <<tbl_login_obj>>. The creation
verifies that the user name is unique, or returns an appropriate HTTP error.
This creation process generates a new profile with a new ID and it's associated
key pair and profile collection. The +POST+ returns a the JSON object
representing the newly created profile.

==== Deleting profiles
A delete of the profile ID remove *all* data associated with a profile.
This requires authentication as the associated profile or the admin profile.

=== Friend management

Friends are added and removed from a given profile. This process requires mutual
agreement, in the form of two one-way transactions. Specifically, profile A
exports their friend-visible data, which includes their public key and
rendezvous protocol addresses. They then transfer that data to the person they
wish to friend (via a mechanism out of scope of this document). Profile B now
adds profile A's data as a friend. If A also adds B as a friend (that is the
same process happens in reverse, B extracts profiles data and sends it to A),
then the friendship is said to be mutual, and a link is formed and data
transfers which are appropriate may begin. The list of friend management API
related URLs appear in table <<tbl_friend_api>>.

[[tbl_friend_api]]
.Friend API
[options="header", width="80%", cols="2m,^m,3"]
|======================
| URL            | Method | Description
| /friends       | POST   | List all friends
| /friends/<pid> | GET    | Get status of a friend
| /friends/<pid> | PUT    | Add/update a friend
| /friends/<pid> | DELETE | Remove a friend
|======================

==== Getting friend information
A get may be performed on either the URL +/friends+ to get data about all
friends, or on +/friends/<pid>+ to get data regarding a specific friend. This
results in a list of JSON objects or a single object respectively. These objects
are simply profile entries. The use of the +?mode+ parameter is supported,
however, since we do not know the private keys of friends, +?mode=private+
should fail with an appropriate HTTP error. 

==== Adding and removing friend data
To add or remove friends, the +PUT+ and +DELETE+ methods may be used. All
puts must consist of profile JSON objects, and must contain the 'contacts'
field. If the profile is not validated (for example, the public key and the ID
do not match) it may be rejected via an appropriate HTTP error code. If the
profile contains new contact data, the contact database is updated. The use of
+DELETE+ removes a friend from being allowed to connect, and stops any
existing communications.

==== Status of friend links
[red]#TODO:# How do I know which friends links are 'up', etc? Should this be
it's own API? Should I add a field to the profile data returned when getting a
friend (status = connecting, etc). Should we provide metrics? Maybe I do a
+GET+ of +/friends/<pid>?status+?


=== Collection management
The collection management API deals with creating, deleting, changing write
access or ownership of, and inviting people to collections. The overview of
various API URLs appears in table <<tbl_collection_api>>. Many of the URLs
utilize common JSON object formats. This includes the collection state object
(table <<tbl_collection_obj>>), the invite object (table <<tbl_invite_obj>>) and
[red]#TODO:# Insert ACL stuff here.

.Collection API
[options="header", width="80%", cols="2m,^m,3"]
|======================
| URL                             | Method | Description
| /collections                    | GET    | List all active collections
| /collections?name=<name>        | POST   | Create a new collection
| /collections/<cid>              | DELETE | Remove a collection
| /collections/<cid>?state        | GET    | Gets the collection's state
| /collections/<cid>?acl          | GET    | Gets the collection's ACL
| /collections/<cid>?acl          | PUT    | Sets the collection's ACL
| /collections/<cid>?invite=<pid> | GET    | Generates an invite
| /collections/<cid>?invited      | POST   | Adds an invite
|======================

.Collection Object
[options="header", width="80%", cols="m,^m,3"]
|======================
| Field      | Type     | Description
| id         | string   | Hex ID of this collection
| name       | string   | Friendly name
| owners     | string[] | List of collection owners (PIDs)
| writers    | string[] | List of collection writers (also PIDs)
| links      | string[] | List of friends that share links to a collection
| stats      | [red]#TBD# | [red]#TODO:# Some size info, etc
|======================

.Invite Object
[options="header", width="80%", cols="m,^m,3"]
|======================
| Field       | Type     | Description
| collection  | string   | CID of collection being invited to
| source      | string   | PID of inviting profile
| destination | string   | PID of invited profile
| crypto      | string   | The crypto goo that makes it work
|======================

==== Listing collections
A +GET+ of +/collections+ will return a JSON list of collection state
objects (table <<tbl_collection_obj>>). Note: accessing a specific
collection directly will list the items in the collection (see Data access API)
. To get the state of a specific collection, use the URL
+/collections/<cid>?state+.

==== Creating a new collection
To create a new collection owned by the currently authenticated profile with
initial write access only to that profile and with an empty set of items, a
+POST+ is made to the URL +/collections?name=<name>+ with <name> set to the
desired friendly name for the collection.

[red]#TODO:# once again, I could make the POST name contain JSON with the name
and a command instead.

The +POST+ operation returns a collection state object for the newly created
collection. 

==== Deleting a collection
A +DELETE+ the the URL +/collections/<cid>+ will remove the collection <cid>
from the currently authenticated profile, along with any meta-data stored on
behalf of the collection. However, this is a purely local action, so other users
may still use the collection without change, it is simply the case the the
currently authenticated profile will no longer participate. Of course if that
profile was the only profile which was using the collection, then it will be
gone globally.

==== ACL Management
[red]#TODO:# Add this

==== Managing invites
One profile can 'invite' another profile which is its friend to access a
collection. To do this, a profile requests that an invite object is generated.
It then provides this invite to it's friend (possibly via placing the invite
data into a collection accessible by it's friend, such as the primary collection
associated with the profile). The friend may then 'accept' the invitation,
creating a link between the two profiles specific to that collection.

To perform the first part of this process, the currently authenticated user
<pid_a> performs a +GET+ of +/collections/<cid>?invite=<pid_b>+. This
generates an invite object (see table <<tbl_invite_obj>). This object is then
given to the user <pid_b> via some method. This user then does a +POST+ to
their authenticated {hb} +/collections/<cid>?invited+. This completes the
transaction.

=== Data access API
The data access API allows access to data from collections. 

.Data access API
[options="header", width="80%", cols="2m,^m,3"]
|======================
| URL                            | Method   | Description
| /<pid>/collections/<cid>       | GET    | Lists objects in a collection
| /<pid>/collections/<cid>/<key> | GET    | Gets an object
| /<pid>/collections/<cid>/<key> | PUT    | Puts an object
| /<pid>/collections/<cid>/<key> | DELETE | Deletes an object
|======================

== Link Layer
[red]#TODO#

=== Assumptions
* When a request is made, the callback is gauranteed to be called eventually.
* When a callback fails, immediately resending is gauranteed to not immediately return another failure. 
* Failures are rate limited.
* Every send assumes an attempt which implies the passage of time.

* Messages sent arrive whole and correct on the remote side.
* Order is not gauranteed.
* Messages sent while link is up will eventually be received by remote side or
  link down will be indicated.

=== API
.Link Layer API
[options="header", width="80%", cols="m,^m,3"]
|======================
| Name | Parameters | Description
.3+| create | id: Fingerprint .3+| Create/Update link
            | cert: string 
            | rp_list: string[]
.1+| delete | id: Fingerprint .1+| Remove a link
.3+| sendRequest | id: Fingerprint .3+| Send data over a link
            | svc: ServiceId
            | msg: Blob
            | cb: Callback
|======================

Callback(resp, err)

.Link Layer Callbacks
[options="header", width="80%", cols="m,^m,3"]
|======================
| Name | Parameters | Description
.2+| on_recv | id: hash_value 
.2+| Data received over link
             | msg: Blob
.2+| on_link | id: hash_value
.2+| Link State changed
             | status: Status
|======================

== Synchronization Layer

.Synchronization Layer API
[options="header", width="80%", cols="m,^m,3"]
|======================
| Name | Parameters | Description
.4+| put       | topic: string
.4+| Put a +value+ into the table referenced by +topic+ and +key+
               | key: string
               | value: Blob
               | $ret: Status
.3+| get       | topic: string
.3+| Get
               | key: string
               | $ret: Blob
.3+| subscribe | pk: PublicKey
.3+| Subscribe
               | topic: string
               | enable: bool
.3+| publish   | pk: PublicKey
.3+| Publish
               | topic: string
               | enable: bool
|======================

.Synchronization Layer Callbacks
[options="header", width="80%", cols="m,^m,3"]
|======================
| Name | Parameters | Description
.4+| on_update | pk: PublicKey
.4+| Notify clients when new values are available 
               | topic: string
               | key: string
               | value: Blob
|======================

== Metadata Protocol
[red]#TODO#

== Distributed Tracking Protocol
[red]#TODO#

== Content Transfer Protocol
[red]#TODO#
